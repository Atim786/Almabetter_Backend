MongoDB

1. What is MongoDB and its Key Features?

MongoDB is a NoSQL database that uses a document-oriented data model and supports a flexible schema design.
Key features include:
Document-oriented storage: JSON-like documents with dynamic schemas.
Scalability: Horizontal scalability with sharding.
High performance: Indexing, replication, and native aggregation.
Flexible query language and indexing support.

2. MongoDB vs Traditional Relational Databases

MongoDB stores data in flexible, JSON-like documents, in contrast to the structured tables and rows of relational databases.
It allows for a more dynamic schema, handling data that varies in structure.
MongoDB is designed for scalability and performance with mechanisms like sharding.

3. Document-Oriented Storage Approach

MongoDB stores data in BSON documents (Binary JSON) which support a rich set of data types.
This model allows for data structures to be stored and retrieved in a way that is more natural to applications.


MongoDB Compass

1. MongoDB Compass and Its Usage

MongoDB Compass is a graphical interface for MongoDB that allows users to visualize and manipulate their database data.
It provides features like query building, data visualization, index management, and more.

2. Connecting to a Database using MongoDB Compass

To connect, you typically enter the databaseâ€™s URI, specify the credentials, and configure options like SSL if needed.

3. Key Features and Benefits of MongoDB Compass

Visual Query Builder: Helps in constructing queries visually.
Real-time Schema Visualization: Shows the schema of collections.
Performance Analysis: Index usage, query performance.
CRUD Interface: Easy data insertion, modification, and deletion.

Collections in MongoDB

1. Collection in MongoDB vs Tables in SQL

A collection in MongoDB is similar to a table in SQL. However, unlike tables, collections do not enforce a schema, allowing the documents within them to have different fields.

2. Creating, Updating, or Deleting a Collection

Create: db.createCollection(name, options)
Update: Generally, collections are not "updated" in the same sense as documents; instead, indexes or validators are modified.
Delete: db.collection.drop()


3. How MongoDB Stores Data in Collections

Data is stored in BSON documents grouped into collections. Documents within a collection can have varied schemas.


Querying in MongoDB

1. Basic Query in MongoDB

A basic query can be performed using db.collection.find(query, projection).

2. Operators: $gt, $lt, $eq

$gt (greater than), $lt (less than), $eq (equal) are used in queries to filter documents based on specific conditions.

3. Query with Multiple Criteria

Example: db.collection.find({age: {$gt: 25}, status: {$eq: "active"}})

Importing & Exporting Data
1. Importing Data into MongoDB

Use tools like mongoimport. Example: mongoimport --db mydb --collection mycol --file mydata.json

2. Exporting Data from MongoDB

Use mongoexport. Example: mongoexport --db mydb --collection mycol --out mydata.json

3. Best Practices for Large Datasets

Ensure efficient indexing, use batch operations, monitor memory and network usage.

Querying Nested Documents
1. Querying Nested Documents

Use dot notation. Example: db.collection.find({"address.city": "New York"})

2. Text Search

Requires a text index. Use $text to perform a text search. Example: db.collection.find({$text: {$search: "keyword"}})

3. Query Projection

Selects only the necessary fields. Example: db.collection.find({}, {name: 1, address: 1})

Documents in MongoDB
1. Document vs Record in SQL

A document is a set of key-value pairs, more flexible compared to a structured record in SQL.

2. Data Types in Documents

Supports various data types like string, integer, boolean, array, date, object, etc.

3. Updating Fields in a Document

Use db.collection.update(). Example: db.collection.update({_id: id}, {$set: {"field": newValue}})

Advanced CRUD Operations
1. Advanced CRUD Example

Complex queries, bulk operations, transactions.

2. Bulk Operations

Handled by methods like bulkWrite which can perform multiple insert, update, and delete operations.

3. Upserts

An upsert updates a document if it exists or inserts a new document if it does not.

MongoDB and Pagination
1. Implementing Pagination

Use limit() and skip(). Example: db.collection.find().limit(10).skip(20)

2. Challenges and Solutions for Large Datasets

Performance issues with skip(). Better to use range queries based on indexed fields.

3. Limit() and Skip()

limit() controls the number of documents returned, skip() controls where to start returning documents from.

Indexes in MongoDB
1. Purpose of Indexing

Improves the performance of queries by allowing efficient data searches.

2. Creating and Managing Indexes

Use db.collection.createIndex(). Indexes can be managed via MongoDB Compass or the shell.

3. Impact on Performance

Indexes speed up read operations but can slow down writes and use more storage.

Aggregation Operations
1. Aggregation Importance

Allows complex data processing and transformation, grouping, sorting, and aggregating data.

2. Aggregation Pipeline Scenario

Useful for data analysis, like aggregating sales data to calculate total sales per region.

3. $group vs $sort

$group aggregates documents by specified criteria, $sort orders the documents in a specified way.
